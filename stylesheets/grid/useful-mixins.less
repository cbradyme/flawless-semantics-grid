// USEFUL LESS MIXINS for Flawless Semantics
///////////////////////////
// GRID MIXIN // Sean Steindl aka http://github.com/laughingwithu
/////////////////////////

// Variables specific to the .widths() mixin
@min-width: 400px; // minimum width of the grid (any css unit) Default = 400px
@max-width: @gridsystem-width; // this is the maximum width of the grid (any css unit) Default = @gridsystem-width. NOTE when @total-width is set to 100% this can be used to constrain the grid to any size.

// a width mixin, allows an element (usually body or some other wrapper) to become a grid container with the values from above or as specified by the user
.widths(@min-width:@min-width, @max-width:@max-width) {
  min-width: @min-width;
  max-width: @max-width;
  .clearfix();
}

////////////////////
// MICRO CLEARFIX // http://nicolasgallagher.com/micro-clearfix-hack/
////////////////////

.clearfix() {
	*zoom:1;
	
	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}

///////////////////////////
// EQUAL HEIGHT COLUMNS // Sean Steindl aka http://github.com/laughingwithu
///////////////////////// 
// wrap parent of equal height column
.col_equal_wrap() {
	overflow: hidden; 
    display:block;
	position:relative;
}
// make this an equal height column
.col_equal() {
	padding-bottom:32767px;
    margin-bottom:-32767px;	
}
// remove equal height column (useful when we do responsive design as we might not care if they are equal heights
.col_equal_remove() {
	padding-bottom: 0;
	margin-bottom: 0;
}
