//Flawless-Semantics adapted by Sean Steindl from the Semantic.gs
///////////
// GRID SPECIFIC CALCULATIONS
//////////

// Utility variable - you should never need to modify this
@gridsystem-width: (@column-width*@columns) + (@gutter-width*@columns) * 1px;

// Set @total-width to 100% for a fluid layout
@total-width: @gridsystem-width;

// Utility variable for the print layout - you should never need to modify this (note the one less gutter than in the original grid)
@p-gridsystem-width: (@column-width*@columns) + (@gutter-width*(@columns - 1))* 1px;

// Set @total-width to 100% for a fluid layout
@p-total-width: @p-gridsystem-width;

// gutter widths for columns
@p-column-gutter-width: @p-total-width*((@gutter-width)/@p-gridsystem-width);

@column-gutter-width: @total-width*((@gutter-width)/@gridsystem-width);

//////////
// Grid //
//////////
.grid(){
	.row(@columns);
}

/*  For use in the original grids
.grid(){
	@calculated-row-width: (@total-width*((@gutter-width + @gridsystem-width))/@gridsystem-width);
	min-width: @min-width;
	max-width: @calculated-row-width;
	display: block;
	.clearfix;
} */

//////////
// ROWS //
//////////
// Margin-based rows
.row(@columns:@columns) {
	min-width: @min-width;
	display: block;
	.clearfix;
	.mixin(@columns:@columns)  when (ispixel(@total-width))  {
		@calculated-row-width: (@total-width*@gridsystem-width)/@gridsystem-width;
		width: @calculated-row-width; // Need to test this more
		}
	.mixin(@columns:@columns)  when (ispercentage(@total-width))  {
		@calculated-row-width: (@total-width*@gridsystem-width)/@gridsystem-width;
		@calculated-row-width: @total-width*((@gutter-width + @gridsystem-width)/@gridsystem-width);
		width: @calculated-row-width; // Need to test this more
	}
	.mixin(@columns);
}

/////////////
// COLUMNS //
/////////////
// column - specified width
.column(@x,@columns:@columns) {
		display: inline;
		float: left;
		margin-left:0;
		-webkit-box-sizing: border-box;
		-moz-box-sizing: border-box;
		box-sizing: border-box;
	.mixin(@x,@columns:@columns)  when (ispixel(@total-width))  {
		@calculated-column-width: @p-total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @p-gridsystem-width);
		width: @calculated-column-width; // Need to test this more
		margin-right: @p-column-gutter-width;
	}
	// This needs to be tested NOWWWWWWWWWWWWWWWWWWWWWWWWWWW
	.mixin(@x,@columns:@columns)  when (ispercentage(@total-width))  {
		@calculated-column-width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
	@calculated-column-width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
		width: @calculated-column-width; // Need to test this more
		margin-right: @column-gutter-width;
	}
	.mixin(@x,@columns);
}

/////////////////
// PUSH //
/////////////////

.push(@offset:1,@columns:@columns)  {
	.mixin(@offset:1,@columns:@columns)  when (ispixel(@total-width))  {
		@calculated-column-width: @p-total-width*((((@gutter-width+@column-width)*@offset)-@gutter-width) / @p-gridsystem-width);
		@offset-amount:@calculated-column-width+(@column-gutter-width);
		padding-right: 0;
		margin-left: @offset-amount;
	}
	.mixin(@offset:1,@columns:@columns)  when (ispercentage(@total-width))  {
		@calculated-column-width: @total-width*((((@gutter-width+@column-width)*@offset)-@gutter-width) / @gridsystem-width);
		@offset-amount:@calculated-column-width+(@column-gutter-width);
		padding-right: 0;
		margin-left: @offset-amount;
	}
	.mixin(@offset,@columns);
}